{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red8\green18\blue45;\red255\green255\blue255;\red203\green203\blue202;
}
{\*\expandedcolortbl;;\cssrgb\c2298\c9773\c23298;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c83502\c83501\c83084;
}
\margl1440\margr1440\vieww13540\viewh13000\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
	I want to add texture support to my SwiftUI, MetalKit shader program, but I\'92m not ready.  Before I add texture support, I want to refactor my code to better separate and encapsulate related functionality into separate classes.\
\
I currently have a render manager, a uniform manager, and a metal view. The intent is that the render manager be the coordinator/orchestrator for managing the various components necessary to set up an manage the rendering of a shader file. the metal view is intended to do all the configuration and set up of the metal rendering pipelines needed to render a shader.  the uniform manager is responsible for keeping a dynamic memory store of all of the uniforms and values that are sent to the shader to buffer, by the metal view.  Right now, some things in the metal view should be handled in the render manager. Some things are redundant, such as the uniform manager and the metal view both opening the shader source for different reasons. As I developed the application, I was quick to get things working, and did not always take care to keep state management and related logic separated between the render manager and the metal view.  Rather than passing state top down from the render manager to the metal view, the metal view inspects state in the render manager as each has a reference to the other. this is brittle and confusing.  Also, If either encounters an error, the coordination of error handling is indirect and hard to understand, even though it works.  Basically, the render manager should maintain the configuration state of the current rendering set up, leaving each subcomponent to track its own necessary state for operation.\
\
It would be best to extract all shader file handling and processing logic into a separate class called the shader manager.\
I want to load the pre-processed (using `cpp` in a shell exec) shader file one time and do the scanning for uniform definitions, files to monitor for change, and (eventually) texture declarations with the pre-processer\'92s output.  If no errors are encountered during that phase, then the source file should be compiled into .metallib binary format, and the binary\'92s URL should be passed to the metal view for loading.  An error can occur at any stage.  the shader manager would first pre-process the shader file, then scan it for files to monitor, then scan it for uniform definitions, then compile it into a metal binary. The render manager would call the shader manager anytime the user chooses a different shader file, or any of the opened shader files are updated. If the shader manager is successful at opening, pre-processing, scanning, and compiling the shader of file, it will return a value of true to the render manager. the render manager can then access the files to be monitored, the uniforms to be defined, and the URL of the metal binary to pass to the metal view for loading into a library. if an error occurs at any stage, the shader manager will store an error, message, and return false to the render manager.  assuming the shader manager succeeds, the render manager will pass the metal binary URL to the metal view for loading, by calling a load shader method on the metal view.  the load shader method on metal view will accept a URL and attempt to load the binary metal shader file into a library and extract the shader functions it needs.  If an error occurs during this process, the metal view will store an error message and return false to the render manager.  the library successfully created from the metal binary file and the fragment shader functions are found, it will return true to the render manager.\
\
The render manager should be the primary coordinator or controller for all of the render related classes. It is also responsible for communicating with the swift UI view. It is instantiated by the application.\
\
Rather than have the OSC server in the uniform manager, there should be one single OSC server for the entire application. That single server will listen for OSC messages for the entire application. It can then delegate received messages to the render manager, which can decide which messages to send to the uniform manager. I want to define a delegate pattern to be shared by any class that will receive OSC messages.\
\
The metal view will handle all and only the metal specific functionality for rendering.  Any functionality not related specifically to rendering to the metal framework, should be extracted into the render manager.\
\
\'97\'97\
\
OK, I finished most of the ref factoring described above. I would still like to do some more re-factoring between the uniform manager and the shader manager. Specifically, I would like to move the file folder, approval access methods from the uniform manager to the shader manager. I'm not decided whether or not the uniform managers should save the uniforms text file or if the shader manager should. But the shader manager should be used to manage project folder, access, and loading of the shader file and texture files.\
\
I don't know if I will have a separate texture manager. Perhaps I should. My thought was to have the textures be defined through metadata in the shader file, as comments with a specific tagged like:\
\
// @texture \'93../relative/path/to/texture name.jpg\'94\
\
When the shader source is loaded by the shader manager, it will be scanned for these texture meta tags.  The order in which they are defined will be the order in which they are loaded and passed to metal view for rendering. Loading them shouldn't be a problem if they are in the project directory granted access by the user. Now that I think about it, this is the reason to move that project directory access into the shader manager.  I'll need to figure out when to request access to the project folder. The problem is the file dialogue is a synchronous. I'll figure it out. Ideally, when the user opens the shader file, we test if all the dependencies are accessible, and request project folder access that they are not. For example, when loading the shader, if the textures can't be loaded, then we would prompt for access to the project folder, where they reside. For the uniforms text file, save, same thing. We have to use some kind of queue of events to manage the order that they occur given the asynchronous nature, but sequential dependency. Each event in the queue would be processed to completion before the next event would be started.\
\
Am I ready to start working on this? Are there any other considerations I need to take into account? I guess the place to start would be to move the project folder access permission logic into the shader manager. Then have the Sader manager pass the shader file for texture tags, and attempt to load the images. Once that is done, I can work on passing them to the metal view where they'll be better than to textures and samplers during the rendering pipeline creation.\
\
One intermediate step before that might be to display them in new windows / views to confirm they are loaded correctly as standardized RGB bit maps.\
\
}